require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

# need a user

RSpec.describe DatasetsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Dataset. As you add validations to Dataset, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:identifier => %Q[10.13012/J8Z60KZG],
     :title => "Honey bee brain images processed to reveal c-jun mRNA",
     :creator_text => "McNeill, Matthew S.; Robinson, Gene E.",
     :license => "CC0",
     :key => "asdfg",
     :description => %Q[Honey bee brain images processed to reveal c-jun mRNA plus masks and a documenation],
     :publication_year => "2014",
     :publisher => "University of Illinois at Urbana-Champaign",
     :depositor_name => "Demo1 User",
     :depositor_email => "demo1@example.edu",
     :complete => true,
     :corresponding_creator_name => "McNeill, Matthew S.",
     :corresponding_creator_email => "mfall3@illinois.edu",
     :binaries_attributes =>{"0"=>{:description=>"placeholder"}}}
  }

  let(:invalid_attributes) {
    {:identifier => %Q[10.13012/J8Z60KZG],
     :title => "Honey bee brain images processed to reveal c-jun mRNA",
     :license => 0,
     :description => %Q[Honey bee brain images processed to reveal c-jun mRNA plus masks and a documenation],
     :publication_year => "2014",
     :publisher => "University of Illinois at Urbana-Champaign",
     :depositor_name => "Demo1 User",
     :depositor_email => "demo1@example.edu",
     :complete => true,
     :corresponding_creator_name => "McNeill, Matthew S.",
     :corresponding_creator_email => "mfall3@illinois.edu",
     :binaries_attributes =>{"0"=>{:description=>"placeholder"}}}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DatasetsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "Log in User" do

    before(:each) do
      request.env["omniauth.auth"] = OmniAuth.config.mock_auth[:identity]
      auth = request.env["omniauth.auth"]
      user = User.create_with_omniauth(auth)
      session[:user_id] = user.id
      @current_user = User.find(session[:user_id])
    end

    after(:each) do
      session[:user_id] = nil
    end

    describe "GET index" do
      it "assigns a new dataset as @datasets" do
        get :index, {}, valid_session
        dataset = Dataset.create! valid_attributes
        expect(assigns(:datasets)).to eq([dataset])
      end
    end

    describe "GET show" do
      it "assigns the requested dataset as @dataset" do
        dataset = Dataset.create! valid_attributes
        get :show, {:id => dataset.to_param}, valid_session
        expect(assigns(:dataset)).to eq(dataset)
      end
    end

    describe "GET new" do
      it "assigns a new dataset as @dataset" do
        get :new, {}, valid_session
        expect(assigns(:dataset)).to be_a_new(Dataset)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Dataset" do
          expect {
            post :create, {:dataset => {:identifier => %Q[10.13012/J8Z60KZG],
                                        :title => "Title of dataset created by HTTP_POST",
                                        :creator_text => "McNeill, Matthew S.; Robinson, Gene E.",
                                        :license => "CC0",
                                        :key => "asdfg",
                                        :description => %Q[Honey bee brain images processed to reveal c-jun mRNA plus masks and a documenation],
                                        :publication_year => "2014",
                                        :publisher => "University of Illinois at Urbana-Champaign",
                                        :depositor_name => "Demo1 User",
                                        :depositor_email => "demo1@example.edu",
                                        :complete => true,
                                        :corresponding_creator_name => "McNeill, Matthew S.",
                                        :corresponding_creator_email => "mfall3@illinois.edu",
                                        :binaries_attributes =>{"0"=>{:description=>"placeholder"}}}}, valid_session
          }.to change(Dataset, :count).by(1)
        end

        it "assigns a newly created dataset as @dataset" do
          post :create, {:dataset => valid_attributes}, valid_session
          expect(assigns(:dataset)).to be_a(Dataset)
          expect(assigns(:dataset)).to be_persisted
        end

        it "redirects to the created dataset" do
          post :create, {:dataset => valid_attributes}, valid_session
          expect(response).to redirect_to(Dataset.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved dataset as @dataset" do
          post :create, {:dataset => invalid_attributes}, valid_session
          expect(assigns(:dataset)).to be_a_new(Dataset)
        end

        it "re-renders the 'new' template" do
          post :create, {:dataset => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          {:identifier => %Q[10.13012/test2],
           :title => "Title of dataset updated by HTTP_POST",
           :creator_text => "McNeill, Matthew S.; Robinson, Gene E.",
           :license => "CC0",
           :key => "asdfg",
           :description => %Q[Honey bee brain images processed to reveal c-jun mRNA plus masks and a documenation changed description],
           :publication_year => "2014",
           :publisher => "University of Illinois at Urbana-Champaign",
           :depositor_name => "Demo1 User",
           :depositor_email => "demo1@example.edu",
           :complete => true,
           :corresponding_creator_name => "McNeill, Matthew S.",
           :corresponding_creator_email => "mfall3@illinois.edu",
           :binaries_attributes =>{"0"=>{:description=>"placeholder"}}}
        }

        it "updates the requested dataset" do
          dataset = Dataset.create! valid_attributes
          put :update, {:id => dataset.to_param, :dataset => new_attributes}, valid_session
          dataset.reload
          skip("Add assertions for updated state")
        end

        it "assigns the requested dataset as @dataset" do
          dataset = Dataset.create! valid_attributes
          put :update, {:id => dataset.to_param, :dataset => valid_attributes}, valid_session
          expect(assigns(:dataset)).to eq(dataset)
        end

        it "redirects to the dataset" do
          dataset = Dataset.create! valid_attributes
          put :update, {:id => dataset.to_param, :dataset => valid_attributes}, valid_session
          expect(response).to redirect_to(dataset)
        end
      end

      describe "with invalid params" do
        it "assigns the dataset as @dataset" do
          dataset = Dataset.create! valid_attributes
          put :update, {:id => dataset.to_param, :dataset => invalid_attributes}, valid_session
          expect(assigns(:dataset)).to eq(dataset)
        end

      end
    end


  end




end
